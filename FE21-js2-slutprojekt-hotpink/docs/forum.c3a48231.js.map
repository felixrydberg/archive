{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,sBCAAD,EAAAC,EAAA,sBCAe,MAAAC,EAGbC,YACkBC,EACTC,EACAC,EACSC,EAChBC,QAJgBJ,SAAAA,OACTC,MAAAA,OACAC,QAAAA,OACSC,IAAAA,EAIhBE,KAAKD,eACkB,IAAdA,GACH,IAAIE,MAAOC,eAAe,SAC1BH,GDDH,MAwDDI,EAAcC,IAClB,MAAMT,EAAmBU,eAAeC,QAAQ,QAE1CC,EAA4BC,SAASC,cAAc,OACzDF,EAAUG,UAAUC,IAAI,kBAExB,MAAMC,EAAwBJ,SAASC,cAAc,QACrDG,EAAKC,aAAa,KAAM,GAAGT,KAC3BQ,EAAKF,UAAUC,IAAI,cAInB,MAAMf,EAA0BY,SAASC,cAAc,SACvDb,EAAMiB,aAAa,OAAQ,QAC3BjB,EAAMiB,aAAa,OAAQ,SAC3BjB,EAAMiB,aAAa,KAAM,SACzBjB,EAAMiB,aAAa,cAAe,oCAClCjB,EAAMkB,UAAW,EAIjB,MAAMjB,EAA+BW,SAASC,cAAc,YAE5DZ,EAAQgB,aAAa,OAAQ,WAC7BhB,EAAQgB,aAAa,KAAM,WAC3BhB,EAAQgB,aAAa,YAAa,OAClChB,EAAQgB,aAAa,OAAQT,GAC7BP,EAAQgB,aAAa,OAAQ,MAC7BhB,EAAQgB,aAAa,OAAQ,MAC7BhB,EAAQgB,aACN,cACA,wDAIF,MAAME,EAAiCP,SAASC,cAAc,SAC9DM,EAAaF,aAAa,OAAQ,UAClCE,EAAaF,aAAa,QAAS,gBACnCD,EAAKI,iBAAiB,UAAWC,IAC/BA,EAAEC,iBAGkB,KAAlBrB,EAAQsB,OACRtB,EAAQsB,MAAMC,QAAU,KACR,KAAhBxB,EAAMuB,OACNvB,EAAMuB,MAAMC,QAAU,IAEtBC,EAAY,CACV1B,SAAUA,EACVC,MAAOA,EAAMuB,MACbtB,QAASA,EAAQsB,MAvHzBf,SAwHQA,IAEFP,EAAQsB,MAAQ,GAChBvB,EAAMuB,MAAQ,IAEZtB,EAAQsB,MAAMC,OAAS,MACzBvB,EAAQyB,MAAMC,iBAAmB,OAE/B3B,EAAMuB,MAAMC,OAAS,IACvBxB,EAAM0B,MAAMC,iBAAmB,UAInC,MAAMC,EAAgChB,SAASC,cAAc,SAa7D,OAZAe,EAAYX,aAAa,OAAQ,SACjCW,EAAYX,aAAa,QAAS,UAElCD,EAAKa,YAAY7B,GAEjBgB,EAAKa,YAAY5B,GAEjBe,EAAKa,YAAYV,GACjBH,EAAKa,YAAYD,GAEjBjB,EAAUmB,OAAOd,GAEVL,GAUHc,EAAeM,IACnB,MAAMC,EAAQC,EAAAC,IAAIvC,EAAAwC,GAAI,UAAUJ,EAAQvB,YAElC4B,EAAeH,EAAAI,KAAKL,GAAOM,IAC3BC,EAAO,IAAI1C,EAAKkC,EAAQhC,SAAUgC,EAAQ/B,MAAO+B,EAAQ9B,QAASmC,GAClEI,EAAQ,GACdA,EAAMJ,GAAQG,EACdN,EAAAQ,OAAOT,EAAOQ,IAIVE,EAAsBC,IAC1B,MAAMH,EAAgB,GACtB,IAAK,MAAMI,KAAKD,EAASE,MAAO,CAC9B,MA1KJ9C,SA0KYA,EA1KZG,IA0KsBA,EA1KtBF,MA0K2BA,EA1K3BG,UA0KkCA,EA1KlCF,QA0K6CA,GAAY0C,EAASE,MAAMD,GACpEJ,EAAMH,KAAK,IAAIxC,EAAKE,EAAUC,EAAOC,EAASC,EAAKC,IAErD,OAAOqC,EAAMM,WAWTC,EAAoB,CACxBC,EACAC,EACAzC,KAEA,MA7LFT,SA6LUA,EA7LVG,IA6LoBA,EA7LpBF,MA6LyBA,EA7LzBG,UA6LgCA,EA7LhCF,QA6L2CA,GAAY+C,EAG/CE,EAAiBtC,SAASC,cAAc,OACxCsC,EAAgBvC,SAASC,cAAc,OACvCuC,EAAYxC,SAASC,cAAc,MACnCwC,EAAczC,SAASC,cAAc,KACrCyC,EAAqB1C,SAASC,cAAc,KAC5C0C,EAAa3C,SAASC,cAAc,KACpC2C,EAAc5C,SAASC,cAAc,KAkC3C,GAhCAqC,EAAepC,UAAUC,IAAI,mBAE7BsC,EAAYI,UAAY,YAAYvD,IACpCmD,EAAYvC,UAAUC,IAAI,WAE1BqC,EAAUK,UAAY,UAAUzD,IAChCoD,EAAUtC,UAAUC,IAAI,cAExBuC,EAAmBI,UAAY,sBAAsB3D,gCACrDuD,EAAmBxC,UAAUC,IAAI,UAEjCuC,EAAmBlC,iBAAiB,SAAUC,IAC5CA,EAAEC,iBACFb,eAAekD,QAAQ,UAAW5D,GAClC6D,OAAOC,SAASC,QAAQ,mBAG1BP,EAAWE,UAAY,WAAWtD,IAClCoD,EAAWzC,UAAUC,IAAI,aAEzByC,EAAYC,UAAYxD,EACxBuD,EAAY1C,UAAUC,IAAI,QAE1BoC,EAActB,YAAYwB,GAC1BF,EAActB,YAAYuB,GAC1BD,EAActB,YAAYyB,GAC1BH,EAActB,YAAY0B,GAC1BL,EAAerB,YAAYsB,GAC3BD,EAAepB,OAAO0B,GAIlBP,IAAgBlD,EAAU,CAC5B,MAAMgE,EAA+BnD,SAASC,cAAc,UAC5DkD,EAAUjD,UAAUC,IAAI,cACxBgD,EAAUN,UAAY,cACtBM,EAAU3C,iBAAiB,SAAUC,IACnCA,EAAEC,iBACFW,EAAA+B,OAAO/B,EAAAC,IAAIvC,EAAAwC,GAAI,UAAU3B,KAAYN,SAEvCgD,EAAepB,OAAOiC,GAExB,OAAOb,GD7OR,MAEC,MAAMlB,EAAQC,EAAAC,IAAIvC,EAAAwC,GAAI,UACtBF,EAAAgC,QAAQjC,GAAQW,GCKW,MAC3B,MAAMuB,EAAoBtD,SAASuD,cAAc,QAE3ClB,EAAcxC,eAAeC,QAAQ,QAErCF,EAAWC,eAAeC,QAAQ,YAExC,KAAOwD,EAAKE,iBACVF,EAAKG,YAAYH,EAAKI,YAIxBrC,EAAAsC,IAAItC,EAAAC,IAAIvC,EAAAwC,GAAI,UAAU3B,MAAagE,MAAM7B,IAEvC,MAAM8B,EAAU7D,SAASC,cAAc,WACvC4D,EAAQ3D,UAAUC,IAAI,oBACtB,MAAM2D,EAAgB9D,SAASC,cAAc,MAS7C,GARA6D,EAAc5D,UAAUC,IAAI,kBAC5BmD,EAAKS,QAAQD,GAEbA,EAAcjB,UAAY,qCAAqCjD,IAC3DC,eAAeC,QAAQ,UACzB+D,EAAQ5C,YAAYtB,EAAWC,IAG7BmC,EAASiC,SAAU,CAErBF,EAAcjB,UAAYjD,EAASqE,cAEnC,MAAMrC,EAAgBE,EAAmBC,GAErClC,eAAeC,QAAQ,UACzB8B,EAAMsC,SAASvC,IACb,MA9CVxC,SA8CkBA,EA9ClBG,IA8C4BA,EA9C5BF,MA8CiCA,EA9CjCG,UA8CwCA,EA9CxCF,QA8CmDA,GAAYsC,EAErDkC,EAAQ5C,YACNkB,EACE,CACEhD,SAAUA,EACVG,IAAKA,EACLF,MAAOA,EACPG,UAAWA,EAAU4E,WACrB9E,QAASA,GAEXgD,EACAzC,OAMV0D,EAAKrC,YAAY4C,ODxD8BO,KGRpC,WACb,GAAIvE,eAAeC,QAAQ,SAAU,CAEnCE,SACGqE,eAAe,WACf7D,iBAAiB,SAAUC,IAC1BA,EAAEC,iBACFb,eAAekD,QACb,UACAlD,eAAeC,QAAQ,QAAQwE,eAEjCtB,OAAOC,SAASC,QAAQ,qBAGOlD,SAASuD,cAAc,cAChDzC,MAAMyD,QAAU,OAGSvE,SAASuD,cAAc,cAChDzC,MAAMyD,QAAU,OAGUvE,SAASuD,cAAc,YAChDzC,MAAMyD,QAAU,QAG3B,IAAIC,EAA+BxE,SAASuD,cAAc,cAC1DiB,EAAU1D,MAAMyD,QAAU,QAC1BC,EAAUhE,iBAAiB,SAAS,KAClCX,eAAe4E,QACfxB,SAASyB,aHrBbC,IAJD","sources":["src/script/modules/forum.ts","src/script/modules/displayBoard.ts","src/script/modules/Post.ts","src/script/modules/navtoggle.ts"],"sourcesContent":["import { db } from './db';\r\nimport { DataSnapshot, onValue, ref } from 'firebase/database';\r\nimport { createPostgui } from './displayBoard';\r\nimport navToggle from './navtoggle';\r\n\r\n((): void => {\r\n  // Simply calls function to build posts if any changes happen in database\r\n  const dbRef = ref(db, '/posts');\r\n  onValue(dbRef, (snapshot: DataSnapshot): void => createPostgui());\r\n  navToggle();\r\n})();\r\n","import { db } from './db';\r\nimport {\r\n  ref,\r\n  update,\r\n  push,\r\n  remove,\r\n  get,\r\n  DataSnapshot,\r\n} from 'firebase/database';\r\nimport Post from './Post';\r\n\r\n// Whole function is to create forummessages and categories with scaling in mind\r\n// creates category messageboard based on selected category in main page\r\nexport const createPostgui = (): void => {\r\n  const main: HTMLElement = document.querySelector('main');\r\n  // Fetch who is logged in\r\n  const sessionName = sessionStorage.getItem('name');\r\n  // Using sessionstorage to store clicked category. Fetching value with getItem\r\n  const category = sessionStorage.getItem('category');\r\n  // Lets clear any existing childnodes on parent main\r\n  while (main.hasChildNodes()) {\r\n    main.removeChild(main.firstChild);\r\n  }\r\n\r\n  // Fetching snapshot of data under selected category\r\n  get(ref(db, `/posts/${category}`)).then((snapshot: DataSnapshot): void => {\r\n    // Creating Category Header\r\n    const article = document.createElement('article');\r\n    article.classList.add('category-wrapper');\r\n    const categoryTitle = document.createElement('h2');\r\n    categoryTitle.classList.add('category-title');\r\n    main.prepend(categoryTitle);\r\n    // if category does'nt exist, tell user\r\n    categoryTitle.innerText = `No data is available for category ${category}`;\r\n    if (sessionStorage.getItem('login')) {\r\n      article.appendChild(createForm(category));\r\n    }\r\n    // End Category Header\r\n    if (snapshot.exists()) {\r\n      // If category snapshop exists, publish category name\r\n      categoryTitle.innerText = category.toUpperCase();\r\n      // reverse order messages are shown\r\n      const posts: Post[] = chronologicalOrder(snapshot);\r\n      // If data exists create article to store category data in & attach to <main> element\r\n      if (sessionStorage.getItem('login')) {\r\n        posts.forEach((post: Post): void => {\r\n          const { username, uid, title, timestamp, message } = post;\r\n\r\n          article.appendChild(\r\n            createMessageBody(\r\n              {\r\n                username: username,\r\n                uid: uid,\r\n                title: title,\r\n                timestamp: timestamp.toString(),\r\n                message: message,\r\n              },\r\n              sessionName,\r\n              category\r\n            )\r\n          );\r\n        });\r\n      }\r\n    }\r\n    main.appendChild(article);\r\n  });\r\n};\r\n\r\n// Function that creates an message form for each category\r\nconst createForm = (category: string): HTMLDivElement => {\r\n  const username: string = sessionStorage.getItem('name');\r\n\r\n  const container: HTMLDivElement = document.createElement('div');\r\n  container.classList.add('form-container');\r\n  // creating form to send messages with\r\n  const form: HTMLFormElement = document.createElement('form');\r\n  form.setAttribute('id', `${category}`);\r\n  form.classList.add('post-forms');\r\n\r\n  // Title input which has a 5 character minimum requirement\r\n\r\n  const title: HTMLInputElement = document.createElement('input');\r\n  title.setAttribute('type', 'text');\r\n  title.setAttribute('name', 'title');\r\n  title.setAttribute('id', 'title');\r\n  title.setAttribute('placeholder', 'Add a title.. (min 5 characters)');\r\n  title.required = true;\r\n\r\n  // Message input which has a max 500 character limit\r\n\r\n  const message: HTMLTextAreaElement = document.createElement('textarea');\r\n\r\n  message.setAttribute('name', 'message');\r\n  message.setAttribute('id', 'message');\r\n  message.setAttribute('maxlength', '500');\r\n  message.setAttribute('form', category);\r\n  message.setAttribute('cols', '10');\r\n  message.setAttribute('rows', '10');\r\n  message.setAttribute(\r\n    'placeholder',\r\n    'Write something interesting.. (max 500 char length) '\r\n  );\r\n\r\n  // Submit button with listener that checks that the limit & requirement is upheld & forwards data to post creation.\r\n  const submitButton: HTMLInputElement = document.createElement('input');\r\n  submitButton.setAttribute('type', 'submit');\r\n  submitButton.setAttribute('value', 'Post Message');\r\n  form.addEventListener('submit', (e: MouseEvent): void => {\r\n    e.preventDefault();\r\n\r\n    if (\r\n      message.value !== '' &&\r\n      message.value.length <= 500 &&\r\n      title.value !== '' &&\r\n      title.value.length >= 5\r\n    ) {\r\n      addPostToDb({\r\n        username: username,\r\n        title: title.value,\r\n        message: message.value,\r\n        category,\r\n      });\r\n      message.value = '';\r\n      title.value = '';\r\n    }\r\n    if (message.value.length > 500) {\r\n      message.style.borderBlockColor = 'red';\r\n    }\r\n    if (title.value.length < 5) {\r\n      title.style.borderBlockColor = 'red';\r\n    }\r\n  });\r\n  // Simple reset form button\r\n  const resetButton: HTMLInputElement = document.createElement('input');\r\n  resetButton.setAttribute('type', 'reset');\r\n  resetButton.setAttribute('value', 'Cancel');\r\n\r\n  form.appendChild(title);\r\n\r\n  form.appendChild(message);\r\n\r\n  form.appendChild(submitButton);\r\n  form.appendChild(resetButton);\r\n\r\n  container.append(form);\r\n\r\n  return container;\r\n};\r\ninterface config {\r\n  username: string;\r\n  title: string;\r\n  message: string;\r\n  category: string;\r\n}\r\n\r\n// pushes new data to database based on category selection\r\nconst addPostToDb = (newPost: config): void => {\r\n  const dbRef = ref(db, `/posts/${newPost.category}`);\r\n\r\n  const uuid: string = push(dbRef).key;\r\n  const post = new Post(newPost.username, newPost.title, newPost.message, uuid);\r\n  const posts = {};\r\n  posts[uuid] = post;\r\n  update(dbRef, posts);\r\n};\r\n\r\n// Takes the snapshop, creates a array from data and returns a reversed array\r\nconst chronologicalOrder = (snapshot: DataSnapshot): Post[] => {\r\n  const posts: Post[] = [];\r\n  for (const x in snapshot.val()) {\r\n    const { username, uid, title, timestamp, message } = snapshot.val()[x];\r\n    posts.push(new Post(username, title, message, uid, timestamp));\r\n  }\r\n  return posts.reverse();\r\n};\r\ninterface Messages {\r\n  username: string;\r\n  uid: string;\r\n  title: string;\r\n  timestamp: string;\r\n  message: string;\r\n}\r\n\r\n// Function for creating message body, which returns a constructed HTMLDIVElement\r\nconst createMessageBody = (\r\n  messages: Messages,\r\n  sessionName: string,\r\n  category: string\r\n): HTMLDivElement => {\r\n  const { username, uid, title, timestamp, message } = messages;\r\n\r\n  // Message Body with header div containing timestamp, who posted, title and message\r\n  const postWrapperDiv = document.createElement('div');\r\n  const postHeaderDiv = document.createElement('div');\r\n  const postTitle = document.createElement('h5');\r\n  const idParagraph = document.createElement('p');\r\n  const createdByParagraph = document.createElement('p');\r\n  const timeOfPost = document.createElement('p');\r\n  const messageBody = document.createElement('p');\r\n\r\n  postWrapperDiv.classList.add('message-wrapper');\r\n\r\n  idParagraph.innerText = `postid: #${uid}`;\r\n  idParagraph.classList.add('post-id');\r\n\r\n  postTitle.innerText = `Title: ${title}`;\r\n  postTitle.classList.add('post-title');\r\n\r\n  createdByParagraph.innerHTML = `Poster:<a href=\"\"> ${username}</a> (click to show profile)`;\r\n  createdByParagraph.classList.add('poster');\r\n  // Adding clickevent on <p> and setting poster name in session, then reroute user to profile for display of data\r\n  createdByParagraph.addEventListener('click', (e: MouseEvent): void => {\r\n    e.preventDefault();\r\n    sessionStorage.setItem('profile', username);\r\n    window.location.replace('profile.html');\r\n  });\r\n\r\n  timeOfPost.innerText = `Posted: ${timestamp}`;\r\n  timeOfPost.classList.add('timestamp');\r\n\r\n  messageBody.innerText = message;\r\n  messageBody.classList.add('post');\r\n\r\n  postHeaderDiv.appendChild(idParagraph);\r\n  postHeaderDiv.appendChild(postTitle);\r\n  postHeaderDiv.appendChild(createdByParagraph);\r\n  postHeaderDiv.appendChild(timeOfPost);\r\n  postWrapperDiv.appendChild(postHeaderDiv);\r\n  postWrapperDiv.append(messageBody);\r\n  // End Message Body\r\n\r\n  // if user is owner of post, add possibility to remove it.\r\n  if (sessionName === username) {\r\n    const removeBtn: HTMLButtonElement = document.createElement('button');\r\n    removeBtn.classList.add('remove-btn');\r\n    removeBtn.innerText = 'Delete Post';\r\n    removeBtn.addEventListener('click', (e: MouseEvent): void => {\r\n      e.preventDefault();\r\n      remove(ref(db, `/posts/${category}/${uid}`));\r\n    });\r\n    postWrapperDiv.append(removeBtn);\r\n  }\r\n  return postWrapperDiv;\r\n};\r\n","export default class Post {\r\n  public readonly timestamp: Date | string;\r\n  // Constructor includes an optional timestamp variable\r\n  constructor(\r\n    public readonly username: string,\r\n    public title: string,\r\n    public message: string,\r\n    public readonly uid: string,\r\n    timestamp?: Date | string | undefined\r\n  ) {\r\n    // if no timestamp (undefined), create Date else take from variable timestamp\r\n    this.timestamp =\r\n      typeof timestamp === 'undefined'\r\n        ? new Date().toLocaleString('sv-SE')\r\n        : timestamp;\r\n  }\r\n}\r\n","export default function navToggle(): void {\r\n  if (sessionStorage.getItem('login')) {\r\n    // Added clickelement on profile button, which captures login username into profile storage and reroutes to profile\r\n    document\r\n      .getElementById('profile')\r\n      .addEventListener('click', (e: MouseEvent): void => {\r\n        e.preventDefault();\r\n        sessionStorage.setItem(\r\n          'profile',\r\n          sessionStorage.getItem('name').toLowerCase()\r\n        );\r\n        window.location.replace('./profile.html');\r\n      });\r\n\r\n    let btnsignIn: HTMLAnchorElement = document.querySelector('#signinbtn');\r\n    btnsignIn.style.display = 'none';\r\n\r\n    // Slutar visa signup om man är inloggad\r\n    let btnsignUp: HTMLAnchorElement = document.querySelector('#signupbtn');\r\n    btnsignUp.style.display = 'none';\r\n\r\n    // Om man är inloggad visas denna knapp.\r\n    let profilebtn: HTMLAnchorElement = document.querySelector('#profile');\r\n    profilebtn.style.display = 'block';\r\n\r\n    // Om man är inloggad visas denna knapp. Om man trycker på den tas variabler i SessionStorage bort och sidan laddas om\r\n    let btnlogout: HTMLAnchorElement = document.querySelector('#logoutbtn');\r\n    btnlogout.style.display = 'block';\r\n    btnlogout.addEventListener('click', () => {\r\n      sessionStorage.clear();\r\n      location.reload();\r\n    });\r\n  }\r\n}\r\n"],"names":["$fC0jS","parcelRequire","$9a3256eba5ea8251$export$2e2bcd8739ae039","constructor","username","title","message","uid","timestamp","this","Date","toLocaleString","$7d4e101a2889f484$var$createForm","category","sessionStorage","getItem","container","document","createElement","classList","add","form","setAttribute","required","submitButton","addEventListener","e","preventDefault","value","length","$7d4e101a2889f484$var$addPostToDb","style","borderBlockColor","resetButton","appendChild","append","newPost","dbRef","$8tedJ","ref","db","uuid","push","key","post","posts","update","$7d4e101a2889f484$var$chronologicalOrder","snapshot","x","val","reverse","$7d4e101a2889f484$var$createMessageBody","messages","sessionName","postWrapperDiv","postHeaderDiv","postTitle","idParagraph","createdByParagraph","timeOfPost","messageBody","innerText","innerHTML","setItem","window","location","replace","removeBtn","remove","onValue","main","querySelector","hasChildNodes","removeChild","firstChild","get","then","article","categoryTitle","prepend","exists","toUpperCase","forEach","toString","$7d4e101a2889f484$export$7447664c5c3ed81f","getElementById","toLowerCase","display","btnlogout","clear","reload","$b0cfc8d9550b1f45$export$2e2bcd8739ae039"],"version":3,"file":"forum.c3a48231.js.map"}